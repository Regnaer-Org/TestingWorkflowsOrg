name: milestone_sync

on:
  issues:
    types:
      - milestoned

jobs:
  sync-milestone-to-subissues:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check parent issue type using GraphQL
      - name: Check parent issue type using GraphQL
        id: check_type
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          org="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          number="${{ github.event.issue.number }}"

          # Query the issue's type using the GraphQL API with the issue_types preview header.
          result=$(gh api graphql -H "GraphQL-Features: issue_types" -f owner="$org" -f repo="$repo" -F number="$number" -f query='
          query ($owner: String!, $repo: String!, $number: Int!) {
            repository(owner: $owner, name: $repo) {
              issue(number: $number) {
                issueType { name }
              }
            }
          }')
          type=$(echo "$result" | jq -r '.data.repository.issue.issueType.name')
          echo "type=$type" >> "$GITHUB_OUTPUT"

      # Step 2: Debug output to confirm issue type
      - name: Debug Output
        run: |
          echo "Type is: ${{ steps.check_type.outputs.type }}"

      # Step 3: Exit if issue type is not 'bug' or 'story'
      - name: Exit if issue type is not bug or story
        if: ${{ steps.check_type.outputs.type != 'bug' && steps.check_type.outputs.type != 'story' }}
        run: |
          echo "Issue type is neither 'bug' nor 'story'. Exiting."
          exit 0

      # Step 4: Get sub-issues via GraphQL
      - name: Get sub-issues via GraphQL
        id: subissues
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
        run: |
          # Get all issues linked to the parent issue (sub-issues).
          gh api graphql -F id="$ISSUE_NODE_ID" -f query='
          query($id: ID!) {
            node(id: $id) {
              ... on Issue {
                timelineItems(itemTypes: [CONNECTED_EVENT], first: 50) {
                  nodes {
                    ... on ConnectedEvent {
                      subject {
                        __typename
                        ... on Issue { number node_id }
                      }
                    }
                  }
                }
              }
            }
          }' > result.json
          # Prepare numbers and node_ids arrays for later use.
          jq '[.data.node.timelineItems.nodes[].subject | select(.number)] | map(.number)' result.json > subissues_numbers.json
          jq '[.data.node.timelineItems.nodes[].subject | select(.node_id)] | map(.node_id)' result.json > subissues_nodeids.json
          echo "numbers=$(cat subissues_numbers.json | jq -c '.')" >> "$GITHUB_OUTPUT"
          echo "nodeids=$(cat subissues_nodeids.json | jq -c '.')" >> "$GITHUB_OUTPUT"

      # Step 5: Update sub-issues with parent's milestone
      - name: Update sub-issues with parent's milestone
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
          ISSUE_MILESTONE: ${{ github.event.issue.milestone.number }}
        run: |
          numbers=${{ steps.subissues.outputs.numbers }}
          if [ "$numbers" = "" ] || [ "$numbers" = "[]" ]; then
            echo "No sub-issues found. Exiting."
            exit 0
          fi

          for num in $(echo "$numbers" | jq '.[]'); do
            echo "Updating sub-issue $num with milestone $ISSUE_MILESTONE"
            gh api repos/${{ github.repository }}/issues/$num \
              -X PATCH \
              -F milestone="$ISSUE_MILESTONE"
          done

      # Step 6: Add sub-issues to Project PVT_kwDODH0FwM4A3yi4 (if not already present)
      - name: Add sub-issues to Project PVT_kwDODH0FwM4A3yi4
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          nodeids=${{ steps.subissues.outputs.nodeids }}
          PROJECT_NODE_ID="PVT_kwDODH0FwM4A3yi4"

          if [ "$nodeids" = "" ] || [ "$nodeids" = "[]" ]; then
            echo "No sub-issue node IDs found. Exiting."
            exit 0
          fi

          for node_id in $(echo "$nodeids" | jq -r '.[]'); do
            echo "Adding sub-issue node $node_id to project $PROJECT_NODE_ID"
            gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }' -F projectId="$PROJECT_NODE_ID" -F contentId="$node_id"
          done
