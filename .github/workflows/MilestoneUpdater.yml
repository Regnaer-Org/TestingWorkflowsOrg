name: milestone_sync

on:
  issues:
    types:
      - milestoned

jobs:
  sync-milestone-to-subissues:
    runs-on: ubuntu-latest
    steps:
      - name: Check parent issue type using GraphQL
        id: check_type
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          org="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          number="${{ github.event.issue.number }}"
          
          echo "DEBUG: Repository Org: $org"
          echo "DEBUG: Repository Name: $repo"
          echo "DEBUG: Issue Number: $number"

          result=$(gh api graphql -H "GraphQL-Features: issue_types" -f owner="$org" -f repository="$repo" -f number="$number" -f query='
          query ($owner: String!, $repository: String!, $number: Int!) {
            repository(owner: $owner, name: $repository) {
              issue(number: $number) {
                issueType { name }
              }
            }
          }')
          
          echo "DEBUG: Raw GraphQL result:"
          echo "$result"
          
          type=$(echo "$result" | jq -r '.data.repository.issue.issueType.name')
          echo "DEBUG: Extracted issue type: $type"
          echo "type=$type" >> $GITHUB_OUTPUT

          if [ -z "$type" ] || [ "$type" = "null" ]; then
            echo "ERROR: Failed to determine issue type. Exiting."
            exit 1
          fi

      - name: Debug issue type
        run: |
          echo "DEBUG: Issue type is ${{ steps.check_type.outputs.type }}"

      - name: Exit if issue type is not bug or story
        if: ${{ steps.check_type.outputs.type != 'bug' && steps.check_type.outputs.type != 'story' }}
        run: |
          echo "Issue type is neither 'bug' nor 'story'. Exiting."
          exit 0

      - name: Get sub-issues via GraphQL
        id: subissues
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
        run: |
          gh api graphql -H "GraphQL-Features:sub_issues" -H "GraphQL-Features:issue_types" -F id="$ISSUE_NODE_ID" -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Issue {
                  subIssues(first: 100) {
                    nodes {
                      number
                      id
                    }
                  }
                }
              }
            }
          ' > result.json
          jq '[.data.node.subIssues.nodes[].number]' result.json > subissues_numbers.json
          jq '[.data.node.subIssues.nodes[].id]' result.json > subissues_ids.json
          echo "numbers=$(cat subissues_numbers.json | jq -c '.')" >> "$GITHUB_OUTPUT"
          echo "ids=$(cat subissues_ids.json | jq -c '.')" >> "$GITHUB_OUTPUT"

      - name: Update sub-issues with parent's milestone
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
          ISSUE_MILESTONE: ${{ github.event.issue.milestone.number }}
        run: |
          numbers=${{ steps.subissues.outputs.numbers }}
          if [ "$numbers" = "" ] || [ "$numbers" = "[]" ]; then
            echo "No sub-issues found. Exiting."
            exit 0
          fi
          
          for number in $(echo "$numbers" | jq -r '.[]'); do
            gh api graphql -f query='
            mutation($number: Int!, $milestone: Int!) {
              updateIssue(input: {number: $number, milestone: $milestone}) {
                issue { number }
              }
            }' -f number="$number" -f milestone="${ISSUE_MILESTONE}"
          done
