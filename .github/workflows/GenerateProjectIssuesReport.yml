name: Fetch All Project Items (Paginated)

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  fetch-all-items:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch All Project Items (Paginated)
        id: fetch_items
        env:
          GH_TOKEN: ${{ secrets.MILESTONE_SYNC }}
          PROJECT_ID: PVT_kwDODH0FwM4A3yi4
          OUTPUT_FILENAME: project-issues.json
        run: |
          set -e
          echo "Fetching all ProjectV2 items for project: $PROJECT_ID"

          # GraphQL query (with cursor)
          read -r -d '' QUERY <<'EOF'
          query($projectId: ID!, $after: String) {
            node(id: $projectId) {
              ... on ProjectV2 {
                id
                title
                number
                items(first: 100, after: $after) {
                  nodes {
                    id
                    fieldValues(first: 20) {
                      nodes {
                        ... on ProjectV2ItemFieldTextValue {
                          text
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldDateValue {
                          date
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldNumberValue {
                          number
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          optionId
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldIterationValue {
                          title startDate duration iterationId field { ... on ProjectV2FieldCommon { name id } }
                        }
                      }
                    }
                    content {
                      ... on Issue {
                        id number title state createdAt updatedAt closedAt url
                        author { login }
                        assignees(first: 10) { nodes { login } }
                        labels(first: 20) { nodes { name color } }
                        milestone { title number state }
                        issueType { name }
                        parent { ... on Issue { title number url id issueType { name } } }
                        repository { nameWithOwner }
                      }
                    }
                  }
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          EOF

          OUTPUT_FILE="$OUTPUT_FILENAME"
          echo "[]" > "$OUTPUT_FILE"
          HAS_NEXT_PAGE=true
          CURSOR=
          PAGE=1

          while [ "$HAS_NEXT_PAGE" = "true" ]; do
            if [ -z "$CURSOR" ]; then
              VARS="{\"projectId\":\"$PROJECT_ID\"}"
            else
              VARS="{\"projectId\":\"$PROJECT_ID\", \"after\":\"$CURSOR\"}"
            fi

            # Build GraphQL payload for this page
            PAYLOAD=$(jq -n --arg query "$QUERY" --argjson variables "$VARS" '{query: $query, variables: $variables}')
            RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Content-Type: application/json" -d "$PAYLOAD" https://api.github.com/graphql)

            # Check for errors
            if echo "$RESPONSE" | jq -e '.errors' > /dev/null; then
              echo "GraphQL error:"
              echo "$RESPONSE" | jq .
              exit 1
            fi

            # Extract items and accumulate
            ITEMS=$(echo "$RESPONSE" | jq '.data.node.items.nodes')
            jq -c --argjson newItems "$ITEMS" '. + $newItems' "$OUTPUT_FILE" > "tmp.json" && mv "tmp.json" "$OUTPUT_FILE"

            # Pagination: update cursor, check next page
            END_CURSOR=$(echo "$RESPONSE" | jq -r '.data.node.items.pageInfo.endCursor')
            HAS_NEXT_PAGE=$(echo "$RESPONSE" | jq -r '.data.node.items.pageInfo.hasNextPage')
            if [ "$END_CURSOR" = "null" ] || [ -z "$END_CURSOR" ]; then
              CURSOR=
            else
              CURSOR="$END_CURSOR"
            fi

            echo "Fetched page $PAGE, hasNextPage: $HAS_NEXT_PAGE, next cursor: $CURSOR"
            PAGE=$((PAGE+1))
          done

          echo "All project items fetched and saved to $OUTPUT_FILE"
          echo "output_path=$OUTPUT_FILE" >> $GITHUB_OUTPUT

      - name: Upload JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-issues
          path: project-issues.json
