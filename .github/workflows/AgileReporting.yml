name: Export ProjectV2 Items to JSON

on:
  workflow_dispatch:

jobs:
  export-project-items:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Export ProjectV2 Items as JSON
        env:
          GH_TOKEN: ${{ secrets.MILESTONE_SYNC }}
          PROJECT_ID: PVT_kwDODH0FwM4A3yi4
          OUTPUT_FILE: projectv2-items.json
        run: |
          set -euo pipefail

          echo "==== ENVIRONMENT ===="
          echo "PROJECT_ID: $PROJECT_ID"
          echo "OUTPUT_FILE: $OUTPUT_FILE"
          echo "GH_TOKEN (first 8 chars): ${GH_TOKEN:0:8}"
          echo "====================="

          # Show GitHub Actions context for debugging
          echo "==== GITHUB CONTEXT ===="
          env | grep GITHUB_ || true
          echo "========================"

          # The GraphQL query as a HEREDOC
          read -r -d '' QUERY <<'EOF'
          query($projectId: ID!, $after: String) {
            node(id: $projectId) {
              ... on ProjectV2 {
                id
                title
                number
                items(first: 100, after: $after) {
                  nodes {
                    id
                    fieldValues(first: 100) {
                      nodes {
                        ... on ProjectV2ItemFieldTextValue {
                          text
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldDateValue {
                          date
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldNumberValue {
                          number
                          field { ... on ProjectV2FieldCommon { name id } }
                        }
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          optionId
                          field { ... on ProjectV2SingleSelectField { name id } }
                        }
                        ... on ProjectV2ItemFieldIterationValue {
                          title
                          startDate
                          duration
                          iterationId
                          field { ... on ProjectV2IterationField { name id } }
                        }
                      }
                    }
                    content {
                      ... on Issue {
                        id
                        number
                        title
                        state
                        createdAt
                        updatedAt
                        url
                        author { login }
                        closedAt
                        milestone { title number state }
                        issueType { name }
                        labels(first: 100) { nodes { name color } }
                        assignees(first: 100) { nodes { login } }
                        parent {
                          ... on Issue { title number url id issueType { name } }
                        }
                        repository { nameWithOwner }
                      }
                    }
                  }
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          EOF

          # Initial values
          all_nodes_json='[]'
          after=null
          has_next_page=true
          page=1

          while [ "$has_next_page" = true ]; do
            echo "==== FETCHING PAGE $page ===="
            echo "Current after cursor: $after"
            VARS="{\"projectId\":\"$PROJECT_ID\", \"after\":$after}"
            PAYLOAD=$(jq -n --arg query "$QUERY" --argjson variables "$VARS" '{query: $query, variables: $variables}')
            echo "---- GraphQL Query ----"
            echo "$QUERY"
            echo "---- Variables ----"
            echo "$VARS"
            echo "---- Payload ----"
            echo "$PAYLOAD" | jq .
            echo "========================"

            RESPONSE=$(curl --retry 3 --retry-delay 5 --retry-connrefused -s -w "\n%{http_code}" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" https://api.github.com/graphql)

            # Separate HTTP status and body
            HTTP_BODY=$(echo "$RESPONSE" | sed '$d')
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            echo "==== HTTP STATUS: $HTTP_STATUS ===="

            # Print full response for debugging
            echo "==== FULL GRAPHQL RESPONSE ===="
            echo "$HTTP_BODY" | jq . || echo "$HTTP_BODY"
            echo "==============================="

            # Save raw response to file for each page
            echo "$HTTP_BODY" > "graphql_response_page${page}.json"

            # Error handling
            if [ "$HTTP_STATUS" != "200" ]; then
              echo "Non-200 HTTP status: $HTTP_STATUS"
              echo "$HTTP_BODY" > graphql_error_response.json
              exit 1
            fi

            if echo "$HTTP_BODY" | jq -e '.errors' > /dev/null; then
              echo "GraphQL error occurred (see graphql_error_response.json):"
              echo "$HTTP_BODY" | jq .
              echo "$HTTP_BODY" > graphql_error_response.json
              # Print helpful hints
              echo "==== DEBUGGING HINTS ===="
              echo "Check:"
              echo "- Is the PROJECT_ID correct and accessible for this token?"
              echo "- Does the GH_TOKEN have 'read:org' and 'repo' scopes?"
              echo "- Is the ProjectV2 enabled and visible to this user?"
              echo "- Does your IP have access to GitHub API (no firewall issues)?"
              echo "========================="
              exit 1
            fi

            # Extract items and add to accumulator
            ITEMS=$(echo "$HTTP_BODY" | jq '.data.node.items.nodes // []')
            all_nodes_json=$(jq -s '.[0] + .[1]' <(echo "$all_nodes_json") <(echo "$ITEMS"))

            # Pagination
            pageInfo=$(echo "$HTTP_BODY" | jq '.data.node.items.pageInfo')
            after=$(echo "$pageInfo" | jq -r '.endCursor')
            has_next_page=$(echo "$pageInfo" | jq -r '.hasNextPage')
            if [ "$after" = "null" ]; then
              after=null
            else
              after="\"$after\""
            fi
            echo "==== End page $page ===="
            page=$((page+1))
          done

          # Output full JSON
          echo "$all_nodes_json" > "$OUTPUT_FILE"
          echo "Output written: $OUTPUT_FILE"
          ls -lh "$OUTPUT_FILE"

      - name: Upload ProjectV2 JSON and Debug Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: projectv2-json-and-debug
          path: |
            projectv2-items.json
            graphql_error_response.json
            graphql_response_page*.json
