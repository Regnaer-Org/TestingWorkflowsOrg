name: sync_subissue_sprint

on:
  issues:
    types: [edited]

jobs:
  sync-sprint-to-subissues:
    runs-on: ubuntu-latest
    steps:
      # 1. Get the issue's type and global node ID (GraphQL uses 'id')
      - name: Get parent issue type
        id: issue_type
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          org="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          number="${{ github.event.issue.number }}"
          result=$(gh api graphql -H "GraphQL-Features: issue_types" -f owner="$org" -f repo="$repo" -F number="$number" -f query='
            query ($owner: String!, $repo: String!, $number: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $number) {
                  issueType { name }
                  id
                  number
                }
              }
            }
          ')
          type=$(echo "$result" | jq -r '.data.repository.issue.issueType.name')
          issue_id=$(echo "$result" | jq -r '.data.repository.issue.id')
          echo "type=$type" >> $GITHUB_OUTPUT
          echo "issue_id=$issue_id" >> $GITHUB_OUTPUT
          echo "type: $type"
          if [ -z "$type" ] || [ "$type" = "null" ]; then
            echo "ERROR: Failed to determine issue type. Exiting."
            exit 1
          fi

      # 2. Stop workflow if not Story or Bug
      - name: Stop if not Bug or Story
        if: ${{ steps.issue_type.outputs.type != 'Bug' && steps.issue_type.outputs.type != 'Story' }}
        run: |
          echo "Issue type is neither 'Bug' nor 'Story'. Stopping workflow."
          exit 0

      # 3. Get the issue's Sprint (iterationId and title), for each project item
      - name: Get parent Sprint (iterationId and title)
        id: parent_sprint
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          PROJECT_NODE_ID="PVT_kwDODH0FwM4A3yi4"
          issue_id="${{ steps.issue_type.outputs.issue_id }}"
          parent_items=$(gh api graphql -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Issue {
                  projectItems(first: 10) {
                    nodes {
                      project { id }
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldIterationValue {
                            iterationId
                            title
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ' -f id="$issue_id")
          # Find the iterationId and title for our project, if set
          parent_sprint_id=$(echo "$parent_items" | jq -r --arg proj "$PROJECT_NODE_ID" '
            .data.node.projectItems.nodes[] | select(.project.id == $proj) |
              .fieldValues.nodes[]? | select(.iterationId != null) | .iterationId // empty' | head -n1)
          parent_sprint_name=$(echo "$parent_items" | jq -r --arg proj "$PROJECT_NODE_ID" '
            .data.node.projectItems.nodes[] | select(.project.id == $proj) |
              .fieldValues.nodes[]? | select(.iterationId != null) | .title // empty' | head -n1)
          echo "parent_sprint_id=$parent_sprint_id" >> $GITHUB_OUTPUT
          echo "parent_sprint_name=$parent_sprint_name" >> $GITHUB_OUTPUT
          echo "DEBUG: Parent Sprint iterationId: $parent_sprint_id"
          echo "DEBUG: Parent Sprint name: $parent_sprint_name"

      # 4. Get sub-issues of the issue
      - name: Get sub-issues via GraphQL
        id: subissues
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          issue_id="${{ steps.issue_type.outputs.issue_id }}"
          gh api graphql -H "GraphQL-Features:sub_issues" -F id="$issue_id" -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Issue {
                  subIssues(first: 100) {
                    nodes {
                      number
                      id
                      state
                    }
                  }
                }
              }
            }
          ' > result.json
          jq '[.data.node.subIssues.nodes[] | select(.state == "OPEN") | .number]' result.json > subissues_numbers.json
          jq '[.data.node.subIssues.nodes[] | select(.state == "OPEN") | .id]' result.json > subissues_ids.json
          echo "numbers=$(cat subissues_numbers.json | jq -c '.')" >> $GITHUB_OUTPUT
          echo "ids=$(cat subissues_ids.json | jq -c '.')" >> $GITHUB_OUTPUT

      # 5. Get Sprint field id by name (no union selection)
      - name: Get Sprint field id by name
        id: sprint_field
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          PROJECT_NODE_ID="PVT_kwDODH0FwM4A3yi4"
          fields_json=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  fields(first: 50) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            }
          ' -F project="$PROJECT_NODE_ID")
          sprint_field_id=$(echo "$fields_json" | jq -r '.data.node.fields.nodes[] | select(.name == "Sprint") | .id // empty')
          echo "sprint_field_id=$sprint_field_id" >> $GITHUB_OUTPUT
          echo "DEBUG: Sprint field id: $sprint_field_id"

      # 6. Update or remove Sprint on sub-issues to match parent
      - name: Update or remove Sprint on sub-issues to match parent
        env:
          GH_TOKEN: ${{ secrets.milestone_sync }}
        run: |
          numbers=${{ steps.subissues.outputs.numbers }}
          SPRINT_FIELD_ID="${{ steps.sprint_field.outputs.sprint_field_id }}"
          PARENT_SPRINT_ID="${{ steps.parent_sprint.outputs.parent_sprint_id }}"
          PARENT_SPRINT_NAME="${{ steps.parent_sprint.outputs.parent_sprint_name }}"
          PROJECT_NODE_ID="PVT_kwDODH0FwM4A3yi4"
          if [ -z "$SPRINT_FIELD_ID" ]; then
            echo "No Sprint field id found in project."
            exit 0
          fi
          if [ "$numbers" = "" ] || [ "$numbers" = "[]" ]; then
            echo "No sub-issues found. Exiting."
            exit 0
          fi
          for num in $(echo "$numbers" | jq '.[]'); do
            sub_issue_data=$(gh api graphql -f query='
              query($number: Int!, $owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $number) {
                    id
                  }
                }
              }
            ' -F number="$num" -F owner="${GITHUB_REPOSITORY%/*}" -F repo="${GITHUB_REPOSITORY#*/}")
            sub_node_id=$(echo "$sub_issue_data" | jq -r '.data.repository.issue.id')
            # Add to project (idempotent)
            item_add_result=$(gh api graphql -f query='
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }' -F projectId="$PROJECT_NODE_ID" -F contentId="$sub_node_id")
            sub_item_id=$(echo "$item_add_result" | jq -r '.data.addProjectV2ItemById.item.id // empty')
            if [ -z "$sub_item_id" ]; then
              echo "Failed to get item id for sub-issue $num"
              continue
            fi
            if [ -z "$PARENT_SPRINT_ID" ]; then
              echo "Removing Sprint from sub-issue #$num"
              gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                  clearProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: $fieldId}) {
                    projectV2Item { id }
                  }
                }' \
                -F projectId="$PROJECT_NODE_ID" \
                -F itemId="$sub_item_id" \
                -F fieldId="$SPRINT_FIELD_ID"
            else
              echo "Updating sub-issue #$num to Sprint '$PARENT_SPRINT_NAME' (iterationId: $PARENT_SPRINT_ID)"
              gh api graphql -f query='
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { iterationId: $value }}) {
                    projectV2Item { id }
                  }
                }' \
                -F projectId="$PROJECT_NODE_ID" \
                -F itemId="$sub_item_id" \
                -F fieldId="$SPRINT_FIELD_ID" \
                -F value="$PARENT_SPRINT_ID"
            fi
          done
