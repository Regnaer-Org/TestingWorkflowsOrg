Open Issues In Sprint By Day =
VAR SelectedSprint = SELECTEDVALUE(SprintmetaData[sprint])
VAR SelectedDate = SELECTEDVALUE('Calendar'[date])

-- All issues that have ever been in the sprint
VAR IssuesEverInSprint =
    DISTINCT (
        UNION (
            SELECTCOLUMNS(
                FILTER(MetaRisk_GitHub_Data, MetaRisk_GitHub_Data[sprint] = SelectedSprint),
                "content_id", MetaRisk_GitHub_Data[content_id]
            ),
            SELECTCOLUMNS(
                FILTER(SprintAssignments, SprintAssignments[sprint] = SelectedSprint),
                "content_id", SprintAssignments[content_id]
            ),
            SELECTCOLUMNS(
                FILTER(issue_changelog, issue_changelog[field] = "sprint" && issue_changelog[new_value] = SelectedSprint),
                "content_id", issue_changelog[content_id]
            )
        )
    )

RETURN
COUNTROWS (
    FILTER (
        IssuesEverInSprint,
        VAR IssueId = [content_id]

        // Get all events for this issue in date order
        VAR Changelog =
            FILTER(
                issue_changelog,
                issue_changelog[content_id] = IssueId &&
                (
                    (issue_changelog[field] = "sprint" && (issue_changelog[new_value] = SelectedSprint || issue_changelog[old_value] = SelectedSprint))
                    ||
                    (issue_changelog[field] = "content_state" && issue_changelog[new_value] = "CLOSED")
                )
            )

        // Table of all possible entry dates (assigned or moved in)
        VAR EnterDates =
            UNION(
                SELECTCOLUMNS(
                    FILTER(Changelog, issue_changelog[field] = "sprint" && issue_changelog[new_value] = SelectedSprint),
                    "EnterDate", issue_changelog[date]
                ),
                SELECTCOLUMNS(
                    FILTER(SprintAssignments, SprintAssignments[content_id] = IssueId && SprintAssignments[sprint] = SelectedSprint),
                    "EnterDate", SprintAssignments[assigned_date]
                ),
                SELECTCOLUMNS(
                    FILTER(MetaRisk_GitHub_Data, MetaRisk_GitHub_Data[content_id] = IssueId && MetaRisk_GitHub_Data[sprint] = SelectedSprint),
                    "EnterDate", MetaRisk_GitHub_Data[created_date]
                )
            )

        // Table of all possible exit dates (moved out or closed)
        VAR ExitDates =
            UNION(
                SELECTCOLUMNS(
                    FILTER(Changelog, issue_changelog[field] = "sprint" && issue_changelog[old_value] = SelectedSprint && issue_changelog[new_value] <> SelectedSprint),
                    "ExitDate", issue_changelog[date]
                ),
                SELECTCOLUMNS(
                    FILTER(Changelog, issue_changelog[field] = "content_state" && issue_changelog[new_value] = "CLOSED"),
                    "ExitDate", issue_changelog[date]
                )
            )

        // Build ordered pairs of entry/exit dates (assume alternation: enter, exit, enter, exit...)
        // For each enter date, find the next exit date after it (or 2099 if missing)
        VAR IsOpen =
            MAXX (
                ADDCOLUMNS (
                    EnterDates,
                    "ExitDate",
                        MINX (
                            FILTER (
                                ExitDates,
                                ExitDates[ExitDate] > [EnterDate]
                            ),
                            ExitDates[ExitDate]
                        )
                ),
                IF (
                    [EnterDate] <= SelectedDate &&
                    SelectedDate < IF ( ISBLANK([ExitDate]), DATE(2099,1,1), [ExitDate] ),
                    1, 0
                )
            )

        RETURN
            IsOpen = 1
    )
)
